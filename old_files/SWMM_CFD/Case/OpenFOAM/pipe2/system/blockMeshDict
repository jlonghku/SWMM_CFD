/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

geometry
{
    cylinder2
    {
        type searchableCylinder;
        point1 (-100 0 0);
        point2 (100 0 0);
        radius 0.5;
    }
    cylinder
    {
        type    searchableExtrudedCircle;
        file    "curve2.vtk";
        radius  0.5;
    }
}

vertices
(
    // Vertical cylinder
     project (-5 -1 -1) (cylinder)
     project (0 -1 -1) (cylinder)
     project (0 1 -1) (cylinder)
     project (-5 1 -1) (cylinder)
     project (-5 -1 1) (cylinder)
     project (0 -1 1) (cylinder)
     project (0 1 1) (cylinder)
     project (-5 1 1) (cylinder)

);

blocks
(
    
    name sideBlock hex (0 1 2 3 4 5 6 7) (20 10 10)
        simpleGrading (1 1 1)

    
);

edges
(

    // Common face
    project 2 1 (cylinder)
    project 2 6 (cylinder)
    project 6 5 (cylinder)
    project 1 5 (cylinder)

    // Inlet
    project 0 4 (cylinder)
    project 4 7 (cylinder)
    project 7 3 (cylinder)
    project 3 0 (cylinder)

    // Sides of horizontal cylinder. Use projectCurve to do interpolation
    // for radial direction to keep points along edges at constant radial
    // direction.
    projectCurve 0 1 (cylinder)
    projectCurve 3 2 (cylinder)
    projectCurve 7 6 (cylinder)
    projectCurve 4 5 (cylinder)

);

faces
(
    // Common face
    //project (0 3 4 7) cylinder
    //project (1 5 6 2) cylinder
    project (0 1 5 4) cylinder
    project (4 5 6 7) cylinder
    project (7 6 2 3) cylinder
    project (0 3 2 1) cylinder
);


defaultPatch
{
    name walls;
    type wall;
}

boundary
(
    inlet
    {
        type    patch;
        faces   ((sideBlock 0));   //((0 4 7 3));
    }
    outlet
    {
        type    patch;
        faces   ((sideBlock 1));   //((0 4 7 3));
    }

);

// ************************************************************************* //
